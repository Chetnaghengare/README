Installation & Configuration: Cassandra Clustering
Apache Cassandra supports a peer-to-peer architecture. Setting up a Cassandra cluster involves configuring multiple nodes to work together. Below are the detailed steps:

1. Install Cassandra on Each Node
Prerequisite: Ensure Java (JDK 8 or higher) is installed on all machines.

Download and install Apache Cassandra on each machine (node) that will be part of the cluster.

2. Choose a Cluster Name
Decide on a unique name for your cluster (e.g., MyCluster).

This name should be consistent across all nodes in the cluster.

3. Identify Node IP Addresses
Get the static IP address of each node that will be part of the cluster.

Make a list, as you’ll need them for configuration.

4. Configure Each Node
Repeat the following steps on each node:

a. Navigate to the Cassandra Configuration Directory
bash
Copy
Edit
cd <CASSANDRA_HOME>/conf
Replace <CASSANDRA_HOME> with the root directory where Cassandra is installed.

b. Edit the cassandra.yaml File
Open cassandra.yaml using a text editor (e.g., Notepad, nano, or vi):

bash
Copy
Edit
nano cassandra.yaml
Modify or ensure the following fields are set properly:

Cluster Name:

yaml
Copy
Edit
cluster_name: 'MyCluster'
Listen Address (IP of the current node):

yaml
Copy
Edit
listen_address: <IP address of this node>
RPC Address (used for client communication):

yaml
Copy
Edit
rpc_address: <IP address of this node>
Seeds (comma-separated IP addresses of 1 or more nodes):

yaml
Copy
Edit
seed_provider:
  - class_name: org.apache.cassandra.locator.SimpleSeedProvider
    parameters:
      - seeds: "<IP1>,<IP2>,<IP3>"
Note: It’s recommended to specify at least two seed nodes for redundancy.

5. Open and Configure Required Ports
Make sure the following ports are open and not blocked by firewalls on all nodes:


Port	Description
7000	TCP: Intra-node communication (commands & data)
9042	TCP: Native transport port for CQL clients (e.g., cqlsh)
If SSL is enabled, port 7001 is used instead of 7000.

6. Start Cassandra Service
On each node, start the Cassandra service:

bash
Copy
Edit
cassandra -f
Or use a service manager if installed as a service:

bash
Copy
Edit
sudo systemctl start cassandra
7. Verify Cluster Status
After starting Cassandra on all nodes, use the following command on any node:

bash
Copy
Edit
nodetool status
This will show a table of all nodes in the cluster with information such as:

Node Status (UN = Up/Normal, DN = Down/Normal)

IP address

Load

Tokens

Ownership %

Example output:

markdown
Copy
Edit
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address     Load       Tokens  Owns (effective)  Host ID                               Rack
UN  192.168.1.1  256.35 KiB  256     33.3%            xxxxx-...                            rack1
UN  192.168.1.2  243.22 KiB  256     33.3%            xxxxx-...                            rack1
UN  192.168.1.3  251.56 KiB  256     33.3%            xxxxx-...                            rack1
8. Your Cluster is Now Ready
Once all nodes show up in the nodetool status output and are in "UN" (Up/Normal) state, the cluster is successfully formed and ready to process queries.

You can now connect using cqlsh:

bash
Copy
Edit
cqlsh <any_node_ip> 9042





-----------------------------------------------------------------


// Create nodes
CREATE (:TrainStation { city: 'Copenhagen', lat: 55.672874, lon: 12.56459 });

CREATE (:Office { city: 'Malmo', lat: 55.611784, lon: 12.994341 });

UNWIND range(1, 10000) AS id
CREATE (:Location {
    name: 'Location_' + id,
    lat: 55.5 + rand() * 0.5,
    lon: 12.5 + rand() * 0.5
});

// Create relationships from TrainStation to nearby Locations
MATCH (t:TrainStation), (l:Location)
WHERE point.distance(
    point({latitude: t.lat, longitude: t.lon}),
    point({latitude: l.lat, longitude: l.lon})
) < 10000
MERGE (t)-[:TRAVEL_ROUTE]->(l);

// Create relationships from Office to nearby Locations
MATCH (o:Office), (l:Location)
WHERE point.distance(
    point({latitude: o.lat, longitude: o.lon}),
    point({latitude: l.lat, longitude: l.lon})
) < 10000
MERGE (o)-[:TRAVEL_ROUTE]->(l);

// Query closest 5 Locations to TrainStation
MATCH (t:TrainStation), (l:Location)
RETURN l.name, 
    round(point.distance(
        point({latitude: t.lat, longitude: t.lon}), 
        point({latitude: l.lat, longitude: l.lon})
    )) AS distance_meters
ORDER BY distance_meters ASC
LIMIT 5;

// Query 100 travel routes
MATCH (a)-[r:TRAVEL_ROUTE]->(b)
RETURN a, r, b
LIMIT 100;